/**************************************************
 *    Falcon Variant System - Variable Storage
 *    General purpose variable class
 *    meant for intermediate language
 *    to C++.
 *    Written by Shaggi, 2012. Modified by hyperzap.
 *************************************************/

//Possible variable types.
enum{
    VAR_INTTYPE,
    VAR_DOUBLETYPE,
    VAR_STRTYPE,
    VAR_PTRTYPE,
    VAR_REFTYPE,
    VAR_ARRAYTYPE
};



class Variant
{
public:
    //Constructors
    Variant(void) : type(VAR_INTTYPE), int64value(0), databuffsize(0), databuff((char*)0) {};
    Variant(int);
    Variant(long long);
    Variant(double);
    Variant(const char* in);
    Variant(char* in);
    Variant(const Variant & in);//Copy Constructor

    ~Variant();//Destructor



    //Operators
    inline Variant& operator= (Variant);
    inline Variant& operator&= (Variant);

    inline Variant operator+ (Variant);//Addition
    inline Variant operator- (Variant);//Subtraction
    inline Variant operator- ();       //Unary Subtraction
    inline Variant operator* (Variant);//Multiplication
    inline Variant operator/ (Variant);//Division
    inline Variant operator& (Variant);//Concatenation
    void concat_op(char*, char*, int);//concatenation workhorse
    
    //Inline type conversions
    inline operator bool();

    //Explicit type conversions
    char* String(void);
    int Short(void);
    long long Int(void);
    double Double(void);

    int type;

    //Different Datatypes
    union
    {
        long long int64value;
        void* ptr;
        double dvalue;
        Variant* varref;
    };

    char* databuff;
    int databuffsize;
private:
    void StorageReset(void);
    void Cache_StrVal(void);
};






//Constructors
inline Variant::Variant(int in)
{
    type = VAR_INTTYPE;
    int64value = in;
    databuff = (char*)0;
}
inline Variant::Variant(long long in)
{
    type = VAR_INTTYPE;
    int64value = in;
    databuff = (char*)0;
}
Variant::Variant(double in)
{
    type = VAR_DOUBLETYPE;
    dvalue = in;
    databuff = (char*)0;
}
inline Variant::Variant(const char* in)
{
    type = VAR_STRTYPE;
    databuff = (char*)in;
    databuffsize = 0;
}
Variant::Variant(char* in)
{
    type = VAR_STRTYPE;
    int len = strlen(in);
    databuff = new char[len+1];
    strcpy(databuff, in);
    databuffsize = len+1;
}
//Copy Constructor - DESTRUCTOR ALREADY CALLED THEREFORE NO NEED TO FREE
Variant::Variant(const Variant & in)
{
    int len;
    databuff = (char*)0;
    switch(in.type)
    {
    case VAR_INTTYPE:        //Int
        type = VAR_INTTYPE;
        int64value = in.int64value;
        break;
    case VAR_DOUBLETYPE:    //decimal
        type = VAR_DOUBLETYPE;
        dvalue = in.dvalue;
        break;
    case VAR_STRTYPE:        //String
        type = VAR_STRTYPE;
        len = strlen(in.databuff);
        databuff = new char[len+1];
        strcpy(databuff, in.databuff);
        databuffsize = len+1;
        break;
    default:                //Other - Cannot copy.
        type = VAR_INTTYPE;
        int64value = 0;
    }

}







//Assignment operator
Variant& Variant::operator= (Variant in){//Remember to update copy constructor with near duplicate!
                                        //But without the StorageReset() as copy calls destructor.
    //Destroy our own data in prep for assignment
    this->StorageReset();

    int len;
    switch(in.type)
    {
    case VAR_INTTYPE:        //Int
        type = VAR_INTTYPE;
        int64value = in.int64value;
        break;
    case VAR_DOUBLETYPE:    //decimal
        type = VAR_DOUBLETYPE;
        dvalue = in.dvalue;
        break;
    case VAR_STRTYPE:        //String
        type = VAR_STRTYPE;
        len = strlen(in.databuff);
        databuff = new char[len+1];
        strcpy(databuff, in.databuff);
        databuffsize = len+1;
        break;
    default:                //Other - Cannot copy.
        type = VAR_INTTYPE;
        int64value = 0;
    }
    return *this;
}

Variant& Variant::operator&= (Variant in){
    int len = strlen(this->String()) + strlen(in.String()) + 1;
    this->concat_op(this->String(), in.String(), len);
    return *this;
}



//Operators
Variant Variant::operator+ (Variant in){
    if((type==VAR_INTTYPE)&&(in.type==VAR_INTTYPE))
        return Variant((long long)(int64value+in.int64value));
    else{
    long long outl = (long long)(this->Double() + in.Double());
    double outf = this->Double() + in.Double();
    if (outf == (double)outl)
         return Variant((long long)(this->Double() + in.Double()));
    else
        return Variant(this->Double() + in.Double());
    }
}

Variant Variant::operator- (Variant in){
    if((type==VAR_INTTYPE)&&(in.type==VAR_INTTYPE))
        return Variant((long long)(int64value-in.int64value));
    else{
    long long outl = (long long)(this->Double() - in.Double());
    double outf = this->Double() - in.Double();
    if (outf == (double)outl)
         return Variant((long long)(this->Double() - in.Double()));
    else
        return Variant(this->Double() - in.Double());
    }
}

Variant Variant::operator- (){
    if(type==VAR_INTTYPE)
        return Variant((long long)(-int64value));
    else return Variant(-this->Double());
}

Variant Variant::operator* (Variant in){
    if((type==VAR_INTTYPE)&&(in.type==VAR_INTTYPE))
        return Variant((long long)(int64value*in.int64value));
    else{
    long long outl = (long long)(this->Double() * in.Double());
    double outf = this->Double() * in.Double();
    if (outf == (double)outl)
         return Variant((long long)(this->Double() * in.Double()));
    else
        return Variant(this->Double() * in.Double());
    }
}



Variant Variant::operator/ (Variant in){
    if((type==VAR_INTTYPE)&&(in.type==VAR_INTTYPE))
        return Variant((long long)(int64value/in.int64value));
    else{
    long long outl = (long long)(this->Double() / in.Double());
    double outf = this->Double() / in.Double();
    if (outf == (double)outl)
         return Variant((long long)(this->Double() / in.Double()));
    else
        return Variant(this->Double() / in.Double());
    }
}

Variant Variant::operator& (Variant in){
    Variant ret;
    this->Cache_StrVal();
    char* str = in.String();
    ret.concat_op(this->databuff, str, strlen(this->String()) + strlen(str) + 1);
    return ret;
}



void Variant::concat_op(char* former, char* latter, int finallen)
{
    char* all = new char[finallen];
    strcpy(all, former);
    strcat(all, latter);
    this->StorageReset();
    databuff = all;
    databuffsize = finallen;
    type = VAR_STRTYPE;
}






//Destructor
Variant::~Variant()
{
    this->StorageReset();
}








//Internal functions
void inline Variant::StorageReset(void)
{
    if(databuff != 0)
    {
        if(databuffsize > 0)
        {
            delete [] databuff;
        }
    }
    type = VAR_INTTYPE;
    int64value = 0;
    databuff = (char*)0;
}

void Variant::Cache_StrVal(void)
{
    char buffer[32];
    
    if(databuff)//Already Cached.
        return;
    
    switch(type){
        case VAR_INTTYPE:
            sprintf(buffer, "%d", int64value);
            databuffsize = strlen(buffer)+1;
            databuff = new char[databuffsize];
            strcpy(databuff, buffer);
            break;
        case VAR_DOUBLETYPE:
            sprintf(buffer, "%f", dvalue);
            databuffsize = strlen(buffer)+1;
            databuff = new char[databuffsize];
            strcpy(databuff, buffer);
            break;
        default://All other cases: empty string.
            databuff = '\0';
            break;
    }
}

char* Variant::String(void){
    this->Cache_StrVal();
    return databuff;
}

int Variant::Short(void){
    switch(type){
        case VAR_INTTYPE:
            return (int)int64value;
            break;
        case VAR_DOUBLETYPE:
            return (int)dvalue;
            break;
        case VAR_STRTYPE:
            return atoi(databuff);
            break;
        default:
            return 0;
            break;
    }
}

long long Variant::Int(void){
    switch(type){
        case VAR_INTTYPE:
            return (long long)int64value;
            break;
        case VAR_DOUBLETYPE:
            return (long long)dvalue;
            break;
        case VAR_STRTYPE:
#ifdef _MSC_VER
            return _atoi64(databuff);
#else
            return atoll(databuff);
#endif
            break;
        default:
            return 0;
            break;
    }
}

double Variant::Double(void){
    switch(type){
        case VAR_INTTYPE:
            return (double)int64value;
            break;
        case VAR_DOUBLETYPE:
            return dvalue;
            break;
        case VAR_STRTYPE:
            return atof(databuff);
            break;
        default:
            return 0;
            break;
    }
}














Variant::operator bool()
{
    switch(type){
        case VAR_INTTYPE:
            return (bool)int64value;
            break;
        case VAR_DOUBLETYPE:
            return (bool)dvalue;
            break;
        case VAR_STRTYPE:
            if(databuff=='\0')return false;
            return true;
            break;
        default:
            return false;
            break;
    }
}
















typedef Variant vr;

